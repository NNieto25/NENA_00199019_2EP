<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABQUFCSIiIhs1NjUiMDExIBQUFBkAAAARAAAACQAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAgICAP///wDFxcVX4N/fwuPi4szi4uLJ3t7evNfY2KnDxcSGnp+eWFRUVCoAAAAMAAAAAgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAFBQUA////AO/w8Ije0Nb/nnOF/550hf+ngJD/uZun/8+7w/7k29/05ubm0sjK
        yYt2dnY3AAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AH//+AB///wB////j/////////////////8=
</value>
  </data>
</root>